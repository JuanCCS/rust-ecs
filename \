use amethyst::{
    assets::{AssetStorage, Loader, Handle},
    core::{math::Vector3, timing::Time, transform::Transform, SystemDesc},
    derive::{SystemDesc},
    ecs::*,
    shrev::{EventChannel, ReaderId},
    renderer::{Camera, ImageFormat, SpriteRender, SpriteSheet, SpriteSheetFormat, Texture},
};


use rand::{
    distributions::{Distribution, Standard},
    thread_rng, Rng,
};

use rand::prelude::*;



fn load_sprite_sheet(world: &mut World) -> Handle<SpriteSheet> {
    // Load the sprite sheet necessary to render the graphics.
    // The texture is the pixel data
    // `texture_handle` is a cloneable reference to the texture
    let texture_handle = {
        let loader = world.read_resource::<Loader>();
        let texture_storage = world.read_resource::<AssetStorage<Texture>>();
        loader.load(
            "tiles.png",
            ImageFormat::default(),
            (),
            &texture_storage,
        )
    };
    let loader = world.read_resource::<Loader>();
    let sprite_sheet_store = world.read_resource::<AssetStorage<SpriteSheet>>();
    loader.load(
        "tiles.ron", // Here we load the associated ron file
        SpriteSheetFormat(texture_handle),
        (),
        &sprite_sheet_store,
    )
    
}


#[derive(Debug, Clone)]
pub struct SpawnEvent {
    pub tile_index: u32,
}

pub struct WorkerDistribution{
    pub worker_index: u32
}

impl Distribution<WorkerDistribution> for Standard{
    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> WorkerDistribution {
        match rng.gen_range(0,3) {
            0 => WorkerDistribution{
                worker_index: 0,
            },
            1 => WorkerDistribution {
                worker_index: 1,
            },
            _ => WorkerDistribution {
                worker_index: 2,
            }
        }
    }
}

#[derive(SystemDesc, Default)]
pub struct SpawnSystem{
    reader_id: Option<ReaderId<SpawnEvent>>,
    sprite_sheet_handle: Handle<SpriteSheet>,
    left_sprite: SpriteRender,
    right_sprite: SpriteRender
}


impl<'s> System<'s> for SpawnSystem{
    type SystemData = (
        Read<'s, EventChannel<SpawnEvent>>,
        Write<'s, LazyUpdate>,
    );

    fn setup(&mut self, world: &mut World){
        Self::SystemData::setup(world);
        self.reader_id = Some(world.fetch_mut::<EventChannel<SpawnEvent>>().register_reader());
        self.sprite_sheet_handle = load_sprite_sheet(world);
        self.left_sprite = SpriteRender {
            sprite_sheet: self.sprite_sheet_handle.clone(),
            sprite_number: 1
        };

        self.right_sprite = SpriteRender {
            sprite_sheet: self.sprite_sheet_handle.clone(),
            sprite_number: 2 
        };
    }

    fn run(&mut self, (spawn_events, lazy_update): Self::SystemData){
        for event in spawn_events.read(self.reader_id.as_mut().unwrap()){
            // lazy_update.create_entity()
            println!("Handling Event: {}!", event.tile_index);
            let mut transform = Transform::default();
            transform.set_translation_xyz(16.0, 16.0, 0.0);
            lazy_update.create_entity()
                .with(self.left_sprite)
                .with(transform)
                .build();
        } 
    }
}

#[derive(SystemDesc, Default)]
pub struct DebugTriggerSystem{
    spawn_timer: f32,
}


impl<'s> System<'s> for DebugTriggerSystem{
    type SystemData = (
        Read<'s, LazyUpdate>,
        Write<'s, EventChannel<SpawnEvent>>,
        Read<'s, Time>,
    );

    fn run(&mut self, (lazy_update, mut spawn_events, time): Self::SystemData){
        let delta_seconds = time.delta_seconds();
        self.spawn_timer -= delta_seconds;
        if self.spawn_timer <= 0.0 {
           self.spawn_timer = 1.5;
           let WorkerDistribution {worker_index} : WorkerDistribution = rand::random();

           spawn_events.single_write(
               SpawnEvent{
                    tile_index: worker_index
               });
        }
    }
}

